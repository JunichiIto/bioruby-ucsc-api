#!/usr/local/bin/ruby-1.9

require 'erb'
require 'fileutils'

# tables "*Sig" and "*OverlapSignal" are pointer tables containing
# single records. These are ommited.

HEADER = "      ## track: Affy RNA Loc"

TABLES = %w(
wgEncodeAffyRnaChipFiltRawSignalGm12878CellTotal
wgEncodeAffyRnaChipFiltTransfragsGm12878CellTotal
wgEncodeAffyRnaChipRawSignalGm12878CellTotal
wgEncodeAffyRnaChipTransfragsGm12878CellTotal
wgEncodeAffyRnaChipFiltRawSignalGm12878CytosolLongnonpolya
wgEncodeAffyRnaChipFiltTransfragsGm12878CytosolLongnonpolya
wgEncodeAffyRnaChipRawSignalGm12878CytosolLongnonpolya
wgEncodeAffyRnaChipTransfragsGm12878CytosolLongnonpolya
wgEncodeAffyRnaChipFiltRawSignalGm12878CytosolLongpolya
wgEncodeAffyRnaChipFiltTransfragsGm12878CytosolLongpolya
wgEncodeAffyRnaChipRawSignalGm12878CytosolLongpolya
wgEncodeAffyRnaChipTransfragsGm12878CytosolLongpolya
wgEncodeAffyRnaChipFiltRawSignalGm12878NucleusLongnonpolya
wgEncodeAffyRnaChipFiltTransfragsGm12878NucleusLongnonpolya
wgEncodeAffyRnaChipRawSignalGm12878NucleusLongnonpolya
wgEncodeAffyRnaChipTransfragsGm12878NucleusLongnonpolya
wgEncodeAffyRnaChipFiltRawSignalGm12878NucleusLongpolya
wgEncodeAffyRnaChipFiltTransfragsGm12878NucleusLongpolya
wgEncodeAffyRnaChipRawSignalGm12878NucleusLongpolya
wgEncodeAffyRnaChipTransfragsGm12878NucleusLongpolya
wgEncodeAffyRnaChipFiltRawSignalGm12878NucleolusTotal
wgEncodeAffyRnaChipFiltTransfragsGm12878NucleolusTotal
wgEncodeAffyRnaChipRawSignalGm12878NucleolusTotal
wgEncodeAffyRnaChipTransfragsGm12878NucleolusTotal
wgEncodeAffyRnaChipFiltRawSignalHepg2CytosolLongnonpolya
wgEncodeAffyRnaChipFiltTransfragsHepg2CytosolLongnonpolya
wgEncodeAffyRnaChipRawSignalHepg2CytosolLongnonpolya
wgEncodeAffyRnaChipTransfragsHepg2CytosolLongnonpolya
wgEncodeAffyRnaChipFiltRawSignalHepg2CytosolLongpolya
wgEncodeAffyRnaChipFiltTransfragsHepg2CytosolLongpolya
wgEncodeAffyRnaChipRawSignalHepg2CytosolLongpolya
wgEncodeAffyRnaChipTransfragsHepg2CytosolLongpolya
wgEncodeAffyRnaChipFiltRawSignalHepg2NucleusLongnonpolya
wgEncodeAffyRnaChipFiltTransfragsHepg2NucleusLongnonpolya
wgEncodeAffyRnaChipRawSignalHepg2NucleusLongnonpolya
wgEncodeAffyRnaChipTransfragsHepg2NucleusLongnonpolya
wgEncodeAffyRnaChipFiltRawSignalHepg2NucleusLongpolya
wgEncodeAffyRnaChipFiltTransfragsHepg2NucleusLongpolya
wgEncodeAffyRnaChipRawSignalHepg2NucleusLongpolya
wgEncodeAffyRnaChipTransfragsHepg2NucleusLongpolya
wgEncodeAffyRnaChipFiltRawSignalHepg2NucleolusTotal
wgEncodeAffyRnaChipFiltTransfragsHepg2NucleolusTotal
wgEncodeAffyRnaChipRawSignalHepg2NucleolusTotal
wgEncodeAffyRnaChipTransfragsHepg2NucleolusTotal
wgEncodeAffyRnaChipFiltRawSignalK562CellTotal
wgEncodeAffyRnaChipFiltTransfragsK562CellTotal
wgEncodeAffyRnaChipRawSignalK562CellTotal
wgEncodeAffyRnaChipTransfragsK562CellTotal
wgEncodeAffyRnaChipFiltRawSignalK562PolysomeLongnonpolya
wgEncodeAffyRnaChipFiltTransfragsK562PolysomeLongnonpolya
wgEncodeAffyRnaChipRawSignalK562PolysomeLongnonpolya
wgEncodeAffyRnaChipTransfragsK562PolysomeLongnonpolya
wgEncodeAffyRnaChipFiltRawSignalK562CytosolLongnonpolya
wgEncodeAffyRnaChipFiltTransfragsK562CytosolLongnonpolya
wgEncodeAffyRnaChipRawSignalK562CytosolLongnonpolya
wgEncodeAffyRnaChipTransfragsK562CytosolLongnonpolya
wgEncodeAffyRnaChipFiltRawSignalK562CytosolLongpolya
wgEncodeAffyRnaChipFiltTransfragsK562CytosolLongpolya
wgEncodeAffyRnaChipRawSignalK562CytosolLongpolya
wgEncodeAffyRnaChipTransfragsK562CytosolLongpolya
wgEncodeAffyRnaChipFiltRawSignalK562NucleusLongnonpolya
wgEncodeAffyRnaChipFiltTransfragsK562NucleusLongnonpolya
wgEncodeAffyRnaChipRawSignalK562NucleusLongnonpolya
wgEncodeAffyRnaChipTransfragsK562NucleusLongnonpolya
wgEncodeAffyRnaChipFiltRawSignalK562NucleusLongpolya
wgEncodeAffyRnaChipFiltTransfragsK562NucleusLongpolya
wgEncodeAffyRnaChipRawSignalK562NucleusLongpolya
wgEncodeAffyRnaChipTransfragsK562NucleusLongpolya
wgEncodeAffyRnaChipFiltRawSignalK562NucleoplasmTotal
wgEncodeAffyRnaChipFiltTransfragsK562NucleoplasmTotal
wgEncodeAffyRnaChipRawSignalK562NucleoplasmTotal
wgEncodeAffyRnaChipTransfragsK562NucleoplasmTotal
wgEncodeAffyRnaChipFiltRawSignalK562ChromatinTotal
wgEncodeAffyRnaChipFiltTransfragsK562ChromatinTotal
wgEncodeAffyRnaChipRawSignalK562ChromatinTotal
wgEncodeAffyRnaChipTransfragsK562ChromatinTotal
wgEncodeAffyRnaChipFiltRawSignalK562NucleolusTotal
wgEncodeAffyRnaChipFiltTransfragsK562NucleolusTotal
wgEncodeAffyRnaChipRawSignalK562NucleolusTotal
wgEncodeAffyRnaChipTransfragsK562NucleolusTotal
wgEncodeAffyRnaChipFiltRawSignalKeratinocyteCytosolLongnonpolya
wgEncodeAffyRnaChipFiltTransfragsKeratinocyteCytosolLongnonpolya
wgEncodeAffyRnaChipRawSignalKeratinocyteCytosolLongnonpolya
wgEncodeAffyRnaChipTransfragsKeratinocyteCytosolLongnonpolya
wgEncodeAffyRnaChipFiltRawSignalKeratinocyteCytosolLongpolya
wgEncodeAffyRnaChipFiltTransfragsKeratinocyteCytosolLongpolya
wgEncodeAffyRnaChipRawSignalKeratinocyteCytosolLongpolya
wgEncodeAffyRnaChipTransfragsKeratinocyteCytosolLongpolya
wgEncodeAffyRnaChipFiltRawSignalKeratinocyteNucleusLongnonpolya
wgEncodeAffyRnaChipFiltTransfragsKeratinocyteNucleusLongnonpolya
wgEncodeAffyRnaChipRawSignalKeratinocyteNucleusLongnonpolya
wgEncodeAffyRnaChipTransfragsKeratinocyteNucleusLongnonpolya
wgEncodeAffyRnaChipFiltRawSignalKeratinocyteNucleusLongpolya
wgEncodeAffyRnaChipFiltTransfragsKeratinocyteNucleusLongpolya
wgEncodeAffyRnaChipRawSignalKeratinocyteNucleusLongpolya
wgEncodeAffyRnaChipTransfragsKeratinocyteNucleusLongpolya
wgEncodeAffyRnaChipFiltRawSignalProstateCellLongnonpolya
wgEncodeAffyRnaChipFiltTransfragsProstateCellLongnonpolya
wgEncodeAffyRnaChipRawSignalProstateCellLongnonpolya
wgEncodeAffyRnaChipTransfragsProstateCellLongnonpolya
wgEncodeAffyRnaChipFiltRawSignalProstateCellLongpolya
wgEncodeAffyRnaChipFiltTransfragsProstateCellLongpolya
wgEncodeAffyRnaChipRawSignalProstateCellLongpolya
wgEncodeAffyRnaChipTransfragsProstateCellLongpolya
)

temp_spec = "template_spec.txt"
temp_auto = "template_auto.txt"
temp_main = "template_main.txt"

FileUtils.mkdir_p("Specs") unless FileTest.exist?("Specs")
FileUtils.mkdir_p("Libs") unless FileTest.exist?("Libs")

TABLES.each do |tab|
  table_name  = tab
  klass_name  = tab[0].upcase << tab[1..-1]
  script_name = tab.downcase

  open("Specs/#{script_name}_spec.rb", "w") do |writer|
    erb = ERB.new File.read(temp_spec)
    writer.puts erb.result binding
  end

  open("Libs/#{script_name}.rb", "w") do |writer|
    erb = ERB.new File.read(temp_main)
    writer.puts erb.result binding
  end

end

open("autoload_snippet.rb", 'w') do |writer|
  writer.puts HEADER
  TABLES.each do |tab|
    table_name  = tab
    klass_name  = tab[0].upcase << tab[1..-1]
    script_name = tab.downcase
    erb = ERB.new File.read(temp_auto)
    writer.puts erb.result binding
  end
end
