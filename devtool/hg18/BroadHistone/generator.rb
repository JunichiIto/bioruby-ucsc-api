#!/usr/local/bin/ruby-1.9

require 'erb'
require 'fileutils'

HEADER = "      ## track: Broad Histone"

TABLES = %w(
wgEncodeBroadChipSeqPeaksGm12878Ctcf
wgEncodeBroadChipSeqSignalGm12878Ctcf
wgEncodeBroadChipSeqPeaksGm12878H3k4me1
wgEncodeBroadChipSeqPeaksGm12878H3k4me2
wgEncodeBroadChipSeqSignalGm12878H3k4me2
wgEncodeBroadChipSeqPeaksGm12878H3k4me3
wgEncodeBroadChipSeqPeaksGm12878H3k9ac
wgEncodeBroadChipSeqSignalGm12878H3k9ac
wgEncodeBroadChipSeqPeaksGm12878H3k27ac
wgEncodeBroadChipSeqPeaksGm12878H3k27me3
wgEncodeBroadChipSeqSignalGm12878H3k27me3
wgEncodeBroadChipSeqPeaksGm12878H3k36me3
wgEncodeBroadChipSeqSignalGm12878H3k36me3
wgEncodeBroadChipSeqPeaksGm12878H4k20me1
wgEncodeBroadChipSeqSignalGm12878H4k20me1
wgEncodeBroadChipSeqSignalGm12878Control
wgEncodeBroadChipSeqPeaksH1hescCtcf
wgEncodeBroadChipSeqSignalH1hescCtcf
wgEncodeBroadChipSeqPeaksH1hescH3k4me1
wgEncodeBroadChipSeqPeaksH1hescH3k4me2
wgEncodeBroadChipSeqSignalH1hescH3k4me2
wgEncodeBroadChipSeqPeaksH1hescH3k4me3
wgEncodeBroadChipSeqPeaksH1hescH3k9ac
wgEncodeBroadChipSeqSignalH1hescH3k9ac
wgEncodeBroadChipSeqPeaksH1hescH3k27me3
wgEncodeBroadChipSeqSignalH1hescH3k27me3
wgEncodeBroadChipSeqPeaksH1hescH3k36me3
wgEncodeBroadChipSeqSignalH1hescH3k36me3
wgEncodeBroadChipSeqPeaksH1hescH4k20me1
wgEncodeBroadChipSeqSignalH1hescH4k20me1
wgEncodeBroadChipSeqSignalH1hescControl
wgEncodeBroadChipSeqPeaksHepg2Ctcf
wgEncodeBroadChipSeqSignalHepg2Ctcf
wgEncodeBroadChipSeqPeaksHepg2H3k4me2
wgEncodeBroadChipSeqSignalHepg2H3k4me2
wgEncodeBroadChipSeqPeaksHepg2H3k4me3
wgEncodeBroadChipSeqPeaksHepg2H3k9ac
wgEncodeBroadChipSeqSignalHepg2H3k9ac
wgEncodeBroadChipSeqPeaksHepg2H3k27ac
wgEncodeBroadChipSeqPeaksHepg2H3k36me3
wgEncodeBroadChipSeqSignalHepg2H3k36me3
wgEncodeBroadChipSeqPeaksHepg2H4k20me1
wgEncodeBroadChipSeqSignalHepg2H4k20me1
wgEncodeBroadChipSeqSignalHepg2Control
wgEncodeBroadChipSeqPeaksHmecCtcf
wgEncodeBroadChipSeqSignalHmecCtcf
wgEncodeBroadChipSeqPeaksHmecH3k4me1
wgEncodeBroadChipSeqPeaksHmecH3k4me2
wgEncodeBroadChipSeqSignalHmecH3k4me2
wgEncodeBroadChipSeqPeaksHmecH3k4me3
wgEncodeBroadChipSeqPeaksHmecH3k9ac
wgEncodeBroadChipSeqSignalHmecH3k9ac
wgEncodeBroadChipSeqPeaksHmecH3k27ac
wgEncodeBroadChipSeqPeaksHmecH3k27me3
wgEncodeBroadChipSeqSignalHmecH3k27me3
wgEncodeBroadChipSeqPeaksHmecH3k36me3
wgEncodeBroadChipSeqSignalHmecH3k36me3
wgEncodeBroadChipSeqPeaksHmecH4k20me1
wgEncodeBroadChipSeqSignalHmecH4k20me1
wgEncodeBroadChipSeqSignalHmecControl
wgEncodeBroadChipSeqPeaksHsmmCtcf
wgEncodeBroadChipSeqSignalHsmmCtcf
wgEncodeBroadChipSeqPeaksHsmmH3k4me1
wgEncodeBroadChipSeqPeaksHsmmH3k4me2
wgEncodeBroadChipSeqSignalHsmmH3k4me2
wgEncodeBroadChipSeqPeaksHsmmH3k4me3
wgEncodeBroadChipSeqPeaksHsmmH3k9ac
wgEncodeBroadChipSeqSignalHsmmH3k9ac
wgEncodeBroadChipSeqPeaksHsmmH3k27ac
wgEncodeBroadChipSeqPeaksHsmmH3k27me3
wgEncodeBroadChipSeqSignalHsmmH3k27me3
wgEncodeBroadChipSeqPeaksHsmmH3k36me3
wgEncodeBroadChipSeqSignalHsmmH3k36me3
wgEncodeBroadChipSeqPeaksHsmmH4k20me1
wgEncodeBroadChipSeqSignalHsmmH4k20me1
wgEncodeBroadChipSeqSignalHsmmControl
wgEncodeBroadChipSeqPeaksHuvecCtcf
wgEncodeBroadChipSeqSignalHuvecCtcf
wgEncodeBroadChipSeqPeaksHuvecH3k4me1
wgEncodeBroadChipSeqPeaksHuvecH3k4me2
wgEncodeBroadChipSeqSignalHuvecH3k4me2
wgEncodeBroadChipSeqPeaksHuvecH3k4me3
wgEncodeBroadChipSeqPeaksHuvecH3k9ac
wgEncodeBroadChipSeqSignalHuvecH3k9ac
wgEncodeBroadChipSeqPeaksHuvecH3k9me1
wgEncodeBroadChipSeqSignalHuvecH3k9me1
wgEncodeBroadChipSeqPeaksHuvecH3k27ac
wgEncodeBroadChipSeqPeaksHuvecH3k27me3
wgEncodeBroadChipSeqSignalHuvecH3k27me3
wgEncodeBroadChipSeqPeaksHuvecH3k36me3
wgEncodeBroadChipSeqSignalHuvecH3k36me3
wgEncodeBroadChipSeqPeaksHuvecH4k20me1
wgEncodeBroadChipSeqSignalHuvecH4k20me1
wgEncodeBroadChipSeqPeaksHuvecPol2b
wgEncodeBroadChipSeqSignalHuvecPol2b
wgEncodeBroadChipSeqSignalHuvecControl
wgEncodeBroadChipSeqPeaksK562Ctcf
wgEncodeBroadChipSeqSignalK562Ctcf
wgEncodeBroadChipSeqPeaksK562H3k4me1
wgEncodeBroadChipSeqPeaksK562H3k4me2
wgEncodeBroadChipSeqSignalK562H3k4me2
wgEncodeBroadChipSeqPeaksK562H3k4me3
wgEncodeBroadChipSeqPeaksK562H3k9ac
wgEncodeBroadChipSeqSignalK562H3k9ac
wgEncodeBroadChipSeqPeaksK562H3k9me1
wgEncodeBroadChipSeqSignalK562H3k9me1
wgEncodeBroadChipSeqPeaksK562H3k27ac
wgEncodeBroadChipSeqPeaksK562H3k27me3
wgEncodeBroadChipSeqSignalK562H3k27me3
wgEncodeBroadChipSeqPeaksK562H3k36me3
wgEncodeBroadChipSeqSignalK562H3k36me3
wgEncodeBroadChipSeqPeaksK562H4k20me1
wgEncodeBroadChipSeqSignalK562H4k20me1
wgEncodeBroadChipSeqPeaksK562Pol2b
wgEncodeBroadChipSeqSignalK562Pol2b
wgEncodeBroadChipSeqSignalK562Control
wgEncodeBroadChipSeqPeaksNhekCtcf
wgEncodeBroadChipSeqSignalNhekCtcf
wgEncodeBroadChipSeqPeaksNhekH3k4me1
wgEncodeBroadChipSeqPeaksNhekH3k4me2
wgEncodeBroadChipSeqSignalNhekH3k4me2
wgEncodeBroadChipSeqPeaksNhekH3k4me3
wgEncodeBroadChipSeqPeaksNhekH3k9ac
wgEncodeBroadChipSeqSignalNhekH3k9ac
wgEncodeBroadChipSeqPeaksNhekH3k9me1
wgEncodeBroadChipSeqSignalNhekH3k9me1
wgEncodeBroadChipSeqPeaksNhekH3k27ac
wgEncodeBroadChipSeqPeaksNhekH3k27me3
wgEncodeBroadChipSeqSignalNhekH3k27me3
wgEncodeBroadChipSeqPeaksNhekH3k36me3
wgEncodeBroadChipSeqSignalNhekH3k36me3
wgEncodeBroadChipSeqPeaksNhekH4k20me1
wgEncodeBroadChipSeqSignalNhekH4k20me1
wgEncodeBroadChipSeqPeaksNhekPol2b
wgEncodeBroadChipSeqSignalNhekPol2b
wgEncodeBroadChipSeqSignalNhekControl
wgEncodeBroadChipSeqPeaksNhlfCtcf
wgEncodeBroadChipSeqSignalNhlfCtcf
wgEncodeBroadChipSeqPeaksNhlfH3k4me1
wgEncodeBroadChipSeqPeaksNhlfH3k4me2
wgEncodeBroadChipSeqSignalNhlfH3k4me2
wgEncodeBroadChipSeqPeaksNhlfH3k4me3
wgEncodeBroadChipSeqPeaksNhlfH3k9ac
wgEncodeBroadChipSeqSignalNhlfH3k9ac
wgEncodeBroadChipSeqPeaksNhlfH3k27ac
wgEncodeBroadChipSeqPeaksNhlfH3k27me3
wgEncodeBroadChipSeqSignalNhlfH3k27me3
wgEncodeBroadChipSeqPeaksNhlfH3k36me3
wgEncodeBroadChipSeqSignalNhlfH3k36me3
wgEncodeBroadChipSeqPeaksNhlfH4k20me1
wgEncodeBroadChipSeqSignalNhlfH4k20me1
wgEncodeBroadChipSeqSignalNhlfControl
)

temp_spec = "template_spec.txt"
temp_auto = "template_auto.txt"
temp_main = "template_main.txt"

FileUtils.mkdir_p("Specs") unless FileTest.exist?("Specs")
FileUtils.mkdir_p("Libs") unless FileTest.exist?("Libs")

TABLES.each do |tab|
  table_name  = tab
  klass_name  = tab[0].upcase << tab[1..-1]
  script_name = tab.downcase

  open("Specs/#{script_name}_spec.rb", "w") do |writer|
    erb = ERB.new File.read(temp_spec)
    writer.puts erb.result binding
  end

  open("Libs/#{script_name}.rb", "w") do |writer|
    erb = ERB.new File.read(temp_main)
    writer.puts erb.result binding
  end

end

open("autoload_snippet.rb", 'w') do |writer|
  writer.puts HEADER
  TABLES.each do |tab|
    table_name  = tab
    klass_name  = tab[0].upcase << tab[1..-1]
    script_name = tab.downcase
    erb = ERB.new File.read(temp_auto)
    writer.puts erb.result binding
  end
end
