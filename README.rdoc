= bio-ucsc-api

The Ruby UCSC API: accessing the UCSC Genome Database using Ruby.

This package is based on the followings:
* original ruby-ucsc-api: https://github.com/jandot/ruby-ucsc-api
* ruby-ensembl-api: https://github.com/jandot/ruby-ensembl-api

Major dependent gems:
* active_record http://api.rubyonrails.org/classes/ActiveRecord/Base.html
* bioruby-genomic-interval https://github.com/misshie/bioruby-genomic-interval

Requirement:
* Ruby version 1.9.2 or later
* Ruby version 1.8.7 or later

See also a paper:

Strozzi F, Aerts J: A Ruby API to query the Ensembl database for genomic features.
Bioinformatics 2011, 27:1013-1014.

Your comments, suggestions and requests are welcome. Documentation and
feedback are available at the UserEcho site at
http://rubyucscapi.userecho.com/.

== Features

* Designed as a BioRuby plugin
* Using ActiveRecord as an O/R mapping framework
* Using the Bin index system to improve query performance (see https://github.com/misshie/UCSCBin )
* Automatic conversion of "1-based full-closed intervals" to internal "0-based left-closed right-open intervals" (see also bioruby-genomic-interval)
* Supporting non-official MySql hosts (e.g. local servers)
* Using Rspec for the testing framework
* Support hg19 and hg18 databases. Current version does not support tables containing only single records of the fileName columns linking to bigWIG or bigBED files.

== Supported databases (genome assemblies)
[human] Hg19, Hg18
[mammals] chimp (PanTro3), orangutan (PonAbe2), rhesus (RheMac2), marmoset (CalJac3), mouse (Mm9), rat (Rn4), guinea pig (CavPor3), rabbit (OryCun2), cat (FelCat4), panda (AilMel1), dog (CanFam2), horse (EquCab2), pig (SusScr2), sheep (OviAri1), cow (BosTau4), elephant (LoxAfr3), opossum (MonDom5), platypus (OrnAna1)
[vertebrates] chiken (GalGal3), zebra finch (TaeGut1), lizard (AnoCar2), X. tropicalis (XenTro2), zebrafish (DanRer7), tetraodon (TetNig2), fugu (Fr2), stickleback (GasAcu1), medaka (OryLat2), lamprey (PetMar1)
[deuterostomes] lancelet (BraFlo1), sea squirt (Ci2), sea urchin (StrPur2)
[insects] fruitfly (Dm3)
[nematodes] C.elegans (Ce6)
[others] yeast (SacCer2)
[genome assembly independent] Go, HgFixed, Proteome, UniProt, VisiGene

== Supported tables
* Table names starting with a number: Because Ruby class names cannot start with number, use the table class name starting with "T" (T for Table). Thus, the "2micron_est" table is supprted by the "T2micron_est" class.
  
== Change Log
* *NEW* (v.0.2.1): New genome assemblies are supported: [chimp] PanTro3, [orangutan] PonAbe2, [rhesus] RheMac2, [marmoset] CalJac3, [rat] Rn4, [guinea pig] CavPor3, [rabbit] OryCun2, [cat] FelCat4, [panda] AilMel1, [Dog] CanFam2, [horse] EquCab2, [pig] SusScr2, [sheep] OviAri1, [cow] BosTau4, [elephant] LoxAfr3, [opossum] MonDom5, [platypus] OrnAna1, [chiken] GalGal3, [zebra finch] TaeGut1, [lizard] AnoCar2, [X. tropicalis] XenTro2, [zebrafish] DanRer7, [tetraodon] TetNig2, [fugu] Fr2, [stickleback] GasAcu1, [medaka] OryLat2, [lamprey] PerMar1, [lancelet] BraFlo1, [sea squirt] Ci2, [sea urchin] StrPur2, [yeast] SacCer2
* *NEW* (v.0.2.1): Supporting Ruby 1.8.7 or later
* *NEW* Adding to human Hg19 and Hg18, the following genome assemblies are supported: [mouse] Mm9, [fruitfly] Dm3, [C. elegans] Ce6, [genome assembly independent] Go, HgFixed, Proteome, UniProt, VisiGene
* *UPDATE* (v0.2.0): Now table structures are automatically detected and dynamically defined as classes.
* *MODIFIED* (v0.2.0):  Bio::Ucsc::[Hg18|Hg19]::ReferenceSequence are removed. Use Bio::Ucsc::Reference instead. This class is more object-oriented.
* *MODIFIED* (v0.1.0): The name of this library is now "Ruby UCSC API". The RubyGem name and the GitHub account and the library name are not changed.
*  *MODIFIED* (v0.1.0): Bio::Ucsc::[Hg18|Hg19]::Reference is replaced by Bio::Ucsc::[Hg18|Hg19]::ReferenceSequence.
* *UPDATE* (v0.0.5): Almost all hg18 tables are supported.
* *UPDATE* (v0.0.5): find_by_interval and find_all_by_interval class methods accept the "partial" option. Default is true. When "partial: false" is opted, return value will be only fully-included (non-partially-included) records.  
* *UPDATE* (v0.0.4): Almost all hg19 tables are supported. "filename" tables in ENCODE dataset are omitted. Each of them contains only single record of a path to the raw data file. Definitions of table relations are incomplete. 
* *NEW* (v0.0.3): Supporting locally-stored '2bit' files, which can be downloaded from the UCSC site, to retrieve referencial sequence. Now supporting unknown "N" nucleotide blocks, however, "mask-blocks", which are shown in lower-case in UCSC's DNA function, are not supported yet.
* *MODIFIED* (v0.0.3): For the "TABLE" class and the "column" column, TABLE.find_by_column retrives a first record, and TABLE.find_all_by_column retrieves all the records as an Array.
* *NEW* (v0.0.3-0.0.4): Supporting tables divided into each chromosome, such as "*_RmsK" and "*_gold". Actual names of them are like "chr1_Rmsk", "chr2_Rmsk"... They can be accessed without chromosome names; but with just like "Rmsk" and "Gold".

== Install

 $ gem install bio-ucsc-api --no-ri --no-rdoc

You may need to be root or use "sudo". "--no-ri" and "--no-rdoc" options are recommended because generation of ri/rdoc files takes considerable time. 

== How to Use

 require 'bio-ucsc'

 include Bio::Ucsc::Hg19 
 DBConnection.connect

 # When using a table-class first time, refer the class using full-path.
 # If not, the API will fail to prefetch the table and define the appropreate class.
 # After that, you can refer the table class with a short name enabled by
 # top level "include" funtion 
 Bio::Ucsc::Hg19::Snp131 # This line just refer the table class

 itv =  Bio::GenomicInterval.parse("chr1:1-11,000")
 Snp131.find_all_by_interval(itv).each do |e|
   i = Bio::GenomicInterval.zero_based(e.chrom, e.chromStart, e.chromEnd)
   puts "#{i.chrom}\t#{i.chr_start}\t#{e.name}\t#{e[:class]}"
 end

 itv =  Bio::GenomicInterval.parse("chr17:7,579,614-7,579,700")
 p Snp131.find_all_by_interval(itv)
 p Snp131.find_all_by_interval(itv, partial:false)

 p Snp131.find_by_name("rs56289060")

 # Sometimes, queries using raw SQL provide elegant solutions.
 # 
 sql << 'SQL'
 SELECT name,chrom,chromStart,chromEnd,observed
 FROM snp131 
 WHERE name="rs56289060"
 SQL
 p Snp131.find_by_sql(sql)

 # retrieve reference sequence from a locally-stored 2bit file

 # Obsolete
 # ReferenceSequence.load("hg19.2bit")
 # itv = Bio::GenomicInterval.parse("chr1:9,500-10,999")
 # p ReferenceSequence.find_by_interval(itv)
 hg19ref = Bio::Ucsc:Reference.load("hg19.2bit")
 itv = Bio::GenomicInterval.parse("chr1:9,500-10,999")
 hg19ref.find_by_interval(itv)

 # Connetcting to non-official or local mirror MySQL servers
 DBConnection.db_host = 'foo.example.edu'
 DBConnection.db_username = 'genome'
 DBConnection.db_password = ''
 DBConnection.connect

 DBConnection.default # reset to connect UCSC's public MySQL sever
 DBConnection.connect

== Copyright
Copyright:: (c) 2011 MISHIMA, Hiroyuki (missy at be.to / hmishima at nagasaki-u.ac.jp / @mishimahryk in Twitter)
Copyright:: (c) 2010 Jan Aerts

License:: Ruby license (Ruby's / GPLv2 dual). See COPYING and COPYING.ja for further details.

