= bio-ucsc-api

The Ruby UCSC API: accessing the UCSC Genome Database using Ruby.

Your comments, suggestions and requests are welcome. Documentation and
feedback are available at the UserEcho site at
http://rubyucscapi.userecho.com/.

== Features

* Supporting all organisms in the UCSC genome database.
* Using ActiveRecord as an O/R mapping framework. Basically, each tables can access using ActiveRecord methods.
* Using the Bin index system to improve query performance. This is one of the reason why you use Ruby UCSC API instead of submitting SQL queries directly.
* Supporting genomic sequence query using locally downloaded "2bit" files. Genomic sequences are not stored in UCSC's official MySQL database. 
* Automatic conversion of "1-based full-closed intervals" to internal "0-based left-closed right-open intervals" (see also bioruby-genomic-interval)
* Supporting non-official MySql hosts (e.g. local servers)
* Using Rspec for the testing framework
* Written in pure Ruby and supporting multiple Ruby interpreter implementations including Ruby1.8, Ruby1.9, and JRuby1.6
* Designed as a BioRuby plugin
* Current version does not support tables linking to bigWIG or bigBED files.

== Supported databases (genome assemblies)
[human] Hg19, Hg18
[mammals] chimp (PanTro3), orangutan (PonAbe2), rhesus (RheMac2), marmoset (CalJac3), mouse (Mm9), rat (Rn4), guinea pig (CavPor3), rabbit (OryCun2), cat (FelCat4), panda (AilMel1), dog (CanFam2), horse (EquCab2), pig (SusScr2), sheep (OviAri1), cow (BosTau4), elephant (LoxAfr3), opossum (MonDom5), platypus (OrnAna1)
[vertebrates] chicken (GalGal3), zebra finch (TaeGut1), lizard (AnoCar2), X. tropicalis (XenTro2), zebrafish (DanRer7), tetraodon (TetNig2), fugu (Fr2), stickleback (GasAcu1), medaka (OryLat2), lamprey (PetMar1)
[deuterostomes] lancelet (BraFlo1), sea squirt (Ci2), sea urchin (StrPur2)
[insects] D.melanogaster (Dm3), D.simulans (DroSim1), D.sechellia (DroSec1), D.yakuba (DroYak2), D.erecta (DroEre1), D.ananassae (DroAna2), D.pseudoobscura (Dp3), D.persimilis (DroPer1), D.virilis (DroVir2), D.mojavensis (DroMoj2), D.grimshawi (DroGri1), Anopheles mosquito (AnoGam1), honey bee (ApiMel2)
[nematodes] C.elegans (Ce6), C.brenneri (CaePb3), C.briggsae (Cb3), C.remanei (CaeRem3), C.japonica (CarJap1), P.pacificus (PriPac1)
[others] sea hare (AplCal1), yeast (SacCer2)
[genome assembly independent] Go, HgFixed, Proteome, UniProt, VisiGene

== Implementation
This package is based on the followings:

* original ruby-ucsc-api: https://github.com/jandot/ruby-ucsc-api
* ruby-ensembl-api: https://github.com/jandot/ruby-ensembl-api

Major dependent gems:

* active_record http://api.rubyonrails.org/classes/ActiveRecord/Base.html
* bioruby-genomic-interval https://github.com/misshie/bioruby-genomic-interval

Requirement:

* Ruby version 1.9.2 or later
* Ruby version 1.8.7 or later
* JRuby version 1.6.3 or later support - Appropiate heap size may be specified to invoke JRuby, especially when you use Bio::Ucsc::Reference. Try "jruby -J-Xmx3g your_script.rb" to keep 3G byte heap.

See also:

* Strozzi F, Aerts J: A Ruby API to query the Ensembl database for genomic features.
Bioinformatics 2011, 27:1013-1014.
* UCSCBin library - https://github.com/misshie/UCSCBin
 
== Change Log
* *NEW* (v.0.2.2): Supporting JRuby 1.6.3 or later. Appropiate heap size may be specified to invoke JRuby, especially when you use Bio::Ucsc::Reference. Try "jruby -J-Xmx3g your_script.rb" to keep 3G byte heap.
* *NEW* (v.0.2.1): New genome assemblies are supported: [chimp] PanTro3, [orangutan] PonAbe2, [rhesus] RheMac2, [marmoset] CalJac3, [rat] Rn4, [guinea pig] CavPor3, [rabbit] OryCun2, [cat] FelCat4, [panda] AilMel1, [Dog] CanFam2, [horse] EquCab2, [pig] SusScr2, [sheep] OviAri1, [cow] BosTau4, [elephant] LoxAfr3, [opossum] MonDom5, [platypus] OrnAna1, [chicken] GalGal3, [zebra finch] TaeGut1, [lizard] AnoCar2, [X. tropicalis] XenTro2, [zebrafish] DanRer7, [tetraodon] TetNig2, [fugu] Fr2, [stickleback] GasAcu1, [medaka] OryLat2, [lamprey] PerMar1, [lancelet] BraFlo1, [sea squirt] Ci2, [sea urchin] StrPur2, [D.simulans] DroSim1, [D.sechellia] DroSec1, [D.yakuba] DroYak2, [D.electa] DroEre1, [D.ananassae] DroAna2, [D.pseudoobscura] Dp3, [D.persimilis] DroPer1, [D. virilis] DroVir2, [D.mojavensis] DroMoj2, [D.grimshawi] DroGri1, [Anopheles mosquito] AnoGam1, [honey bee] ApiMel2,  [C.brenneri] CaePb3, [C.briggsae] Cb3, [C.remanei] CaeRem3, [P.pacificus] PriPac1, [sea hare] AplCal1, [yeast] SacCer2
* *NEW* (v.0.2.1): Supporting Ruby 1.8.7 or later
* *NEW* Adding to human Hg19 and Hg18, the following genome assemblies are supported: [mouse] Mm9, [fruitfly] Dm3, [C. elegans] Ce6, [genome assembly independent] Go, HgFixed, Proteome, UniProt, VisiGene
* *UPDATE* (v0.2.0): Internal table class mapping algorithm are changed. Now table types are automatically detected and dynamically defined as classes. Previous versions used static class definition for all tables.
* *MODIFIED* (v0.2.0):  Bio::Ucsc::[Hg18|Hg19]::ReferenceSequence are removed. Use Bio::Ucsc::Reference instead. This class is more object-oriented.
* *MODIFIED* (v0.1.0): The name of this library is now "Ruby UCSC API". The RubyGem name and the GitHub account and the library name are not changed.
*  *MODIFIED* (v0.1.0): Bio::Ucsc::[Hg18|Hg19]::Reference is replaced by Bio::Ucsc::[Hg18|Hg19]::ReferenceSequence.
* *UPDATE* (v0.0.5): Almost all hg18 tables are supported.
* *UPDATE* (v0.0.5): find_by_interval and find_all_by_interval class methods accept the "partial" option. Default is true. When "partial: false" is opted, return value will be only fully-included (non-partially-included) records.  
* *UPDATE* (v0.0.4): Almost all hg19 tables are supported. "filename" tables in ENCODE dataset are omitted. Each of them contains only single record of a path to the raw data file. Definitions of table relations are incomplete. 
* *NEW* (v0.0.3): Supporting locally-stored '2bit' files, which can be downloaded from the UCSC site, to retrieve referential sequence. Now supporting unknown "N" nucleotide blocks, however, "mask-blocks", which are shown in lower-case in UCSC's DNA function, are not supported yet.
* *MODIFIED* (v0.0.3): For the "TABLE" class and the "column" column, TABLE.find_by_column retrieves a first record, and TABLE.find_all_by_column retrieves all the records as an Array.
* *NEW* (v0.0.3-0.0.4): Supporting tables divided into each chromosome, such as "*_RmsK" and "*_gold". Actual names of them are like "chr1_Rmsk", "chr2_Rmsk"... They can be accessed without chromosome names; but with just like "Rmsk" and "Gold".

== Install

 $ gem install bio-ucsc-api --no-ri --no-rdoc

You may need to be root or use "sudo". "--no-ri" and "--no-rdoc" options are recommended because generation of ri/rdoc files takes considerable time. 

== How to Use
=== Basics
* A database of a genome assembly is represented as a module in the Bio::Ucsc module. For example, human hg19 database is referred by "Bio::Ucsc::Hg19".
* Before using a database, establish a connection to the database. For example, "Bio::Ucsc::Hg19::DBConnection.connect". 
* A table in a database is represented as a class in the database module. For example, the snp132 table in the hg19 database is referred by "Bio::Ucsc::Hg19::Snp132".
* Queries to a field (column) in a table are represented by class methods of the table class. For example, finding the first record (row) of the snp132 table in the hg19 database is "Bio::Ucsc::Hg19::Snp132.first". 
* Queries using genomic intervals are supported by .find_by_intervals (returns the first hit record) and .find_all_by (returns all the hit records) class methods. Each method accepts a Bio::GenomicInterval object containing a genomic interval such as "chr1:1233-5678". If a table to query has the "bin"column, the bin index system is automatically used to speed-up the query.
* Fields in a retrieved record can be acccessed by using instance methods of a record object. For example, the name field of a table record stored in the "result" variable is "result.name".  

=== Sample Codes
 require 'bio-ucsc'

 include Bio::Ucsc::Hg19 
 DBConnection.connect

 # When using a table-class first time, refer the class using full-path.
 # If not, the API will fail to prefetch the table and define the appropriate class.
 # After that, you can refer the table class with a short name enabled by
 # top level "include" function 
 Bio::Ucsc::Hg19::Snp131 # This line just refer the table class

 gi =  Bio::GenomicInterval.parse("chr1:1-11,000")
 Snp131.find_all_by_interval(gi).each do |e|
   i = Bio::GenomicInterval.zero_based(e.chrom, e.chromStart, e.chromEnd)
   puts "#{i.chrom}\t#{i.chr_start}\t#{e.name}\t#{e[:class]}"
 end

 gi =  Bio::GenomicInterval.parse("chr17:7,579,614-7,579,700")
 p Snp131.find_all_by_interval(gi)
 p Snp131.find_all_by_interval(gi, partial:false)

 p Snp131.find_by_name("rs56289060")

 # Sometimes, queries using raw SQL provide elegant solutions.
 # 
 sql << 'SQL'
 SELECT name,chrom,chromStart,chromEnd,observed
 FROM snp131 
 WHERE name="rs56289060"
 SQL
 p Snp131.find_by_sql(sql)

 # retrieve reference sequence from a locally-stored 2bit file
 hg19ref = Bio::Ucsc::Reference.load("hg19.2bit")
 gi = Bio::GenomicInterval.parse("chr1:9,500-10,999")
 hg19ref.find_by_interval(gi)

 # Connetcting to non-official or local mirror MySQL servers
 DBConnection.db_host = 'foo.example.edu'
 DBConnection.db_username = 'genome'
 DBConnection.db_password = ''
 DBConnection.connect

 DBConnection.default # reset to connect UCSC's public MySQL sever
 DBConnection.connect

=== Notes of Exceptions in Table Support
* Table names starting with a number: Because Ruby class names cannot start with number, use the table class name starting with "T" (T for Table). Thus, the "2micron_est" table is supported by the "T2micron_est" class.
* Table names starting with uppercase character: Classes for "HInv" and "NIAGene" tables are "HInv" and "NIAGene", respectively
* Tables separated into each chromosome, like 'chr1_rmsk', 'chr2_rmsk'... are supported by a representative class ('Rmsk'). When using the find(_all)_by_interval class method, the API invoke required separated tables automatically.
* For honey bee ApiMel2 database, Group*_chainDm2 and Group*_chainDm2Link tables are accessible using find(_all)_by_interval class methods of the ChainDm2 and ChainDm2Link classes. 
* Special field (column) names: Field names such as 'attribute', 'valid', 'validate', 'class', 'method', 'methods', and 'type' cannot be accessed using instance methods. This restriction is because of the collision of method names that are internally used by ActiveRecord. Instead, use hash to access the field like "result[:type]".

=== details in "find_(all_)by_intervals"
* When a table class is referred first time, the API prefetches the table to get a list of fields and dynamically defines a class using following algorithm.
* If chrom/chromStart/chromEnd fields exist (BED table), the API uses them for interval queries.
* When tName/tStart/tEnd fields exist (PSL table), the API uses them for interval queries.
* When chrom/txStart/txEnd fields exist (genePred table), the API uses them for interval queries.
* When genoName/genoStart/genoEnd fields exist (RMSK table), the API uses them for interval queries.
* If the table has the "bin" column, the API calculate bin index to build a query.
* Otherwise, the API does not support interval queries but support only ActiveRecord's standard methods such as "find_(all_)by_[field name]".

== Copyright
Copyright:: (c) 2011 MISHIMA, Hiroyuki (missy at be.to / hmishima at nagasaki-u.ac.jp / @mishimahryk in Twitter)
Copyright:: (c) 2010 Jan Aerts

License:: Ruby license (Ruby's / GPLv2 dual). See COPYING and COPYING.ja for further details.